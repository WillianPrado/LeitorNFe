// <auto-generated />
using System;
using LeitorNFe.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeitorNFe.Infra.Migrations
{
    [DbContext(typeof(LeitorNFeContext))]
    partial class LeitorNFeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Address", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cMun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cPais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xBairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xCpl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xLgr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xMun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xPais")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Dest", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xNome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPF");

                    b.HasIndex("AddressID");

                    b.ToTable("Dests");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Emit", b =>
                {
                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xFant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("xNome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CNPJ");

                    b.HasIndex("AddressID");

                    b.ToTable("Emits");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.ICMSTot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("infNFeID")
                        .HasColumnType("int");

                    b.Property<decimal>("vNF")
                        .HasColumnType("decimal(18, 10)");

                    b.HasKey("ID");

                    b.HasIndex("infNFeID")
                        .IsUnique();

                    b.ToTable("iCMSTots");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Ide", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("InfNFeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dhEmi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dhSaiEnt")
                        .HasColumnType("datetime2");

                    b.Property<long>("nNF")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("InfNFeID")
                        .IsUnique();

                    b.ToTable("Ides");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.InfNFe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmitID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDNFe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DestID");

                    b.HasIndex("EmitID");

                    b.ToTable("InfNFe");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.InfProt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("chNFe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("infNFeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("infNFeID")
                        .IsUnique();

                    b.ToTable("InfProt");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Prod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CEST")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CFOP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cEAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cEANTrib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cProd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("indTot")
                        .HasColumnType("int");

                    b.Property<int>("infNFeID")
                        .HasColumnType("int");

                    b.Property<decimal>("qCom")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("qTrib")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("uCom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uTrib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("vDesc")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("vProd")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("vUnCom")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("vUnTrib")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("xProd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("infNFeID");

                    b.ToTable("Prods");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Dest", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.Address", "DestAddress")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.Navigation("DestAddress");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Emit", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.Address", "EmitentAddress")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.Navigation("EmitentAddress");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.ICMSTot", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.InfNFe", null)
                        .WithOne("ICMSTot")
                        .HasForeignKey("LeitorNFe.Domain.Domain.ICMSTot", "infNFeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Ide", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.InfNFe", null)
                        .WithOne("Ide")
                        .HasForeignKey("LeitorNFe.Domain.Domain.Ide", "InfNFeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.InfNFe", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.Dest", "Dest")
                        .WithMany()
                        .HasForeignKey("DestID");

                    b.HasOne("LeitorNFe.Domain.Domain.Emit", "Emit")
                        .WithMany()
                        .HasForeignKey("EmitID");

                    b.Navigation("Dest");

                    b.Navigation("Emit");
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.InfProt", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.InfNFe", null)
                        .WithOne("InfProt")
                        .HasForeignKey("LeitorNFe.Domain.Domain.InfProt", "infNFeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.Prod", b =>
                {
                    b.HasOne("LeitorNFe.Domain.Domain.InfNFe", null)
                        .WithMany("Products")
                        .HasForeignKey("infNFeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeitorNFe.Domain.Domain.InfNFe", b =>
                {
                    b.Navigation("ICMSTot");

                    b.Navigation("Ide");

                    b.Navigation("InfProt");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
