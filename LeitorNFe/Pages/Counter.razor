@page "/counter"
@using LeitorNFe.Domain.Interfaces
@using Microsoft.AspNetCore.Http
@using LeitorNFe.Data
@using LeitorNFe.Domain.Domain
@using System.IO

@inject IInfNFeRepository _iInfNFeRepository;

<h1>Upload XML</h1>
<form method="post" enctype="multipart/form-data" @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="file">Selecione um arquivo XML:</label>
        <InputFile name="file" class="form-control" OnChange="HandleFileChange" />
    </div>
    <button type="submit" class="btn btn-primary">Enviar</button>
</form>

@if (InfNFe != null)
{
    <div class="card mt-3">
        <div class="card-header">
            Dados de Identificação da Nota Fiscal
        </div>
        <div class="card-body">
            <p class="card-text"><strong>Número da Nota Fiscal:</strong> @InfNFe.Ide.nNF</p>
            <p class="card-text"><strong>Data e Hora de Emissão:</strong> @InfNFe.Ide.dhEmi.ToString("dd/MM/yyyy HH:mm:ss")</p>
            <p class="card-text"><strong>Data e Hora de Saída/Entrada:</strong> @InfNFe.Ide.dhSaiEnt.ToString("dd/MM/yyyy HH:mm:ss")</p>
        </div>
    </div>

    @if (InfNFe != null && InfNFe.Emit != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Dados do Emitente
            </div>
            <div class="card-body">
                <p class="card-text"><strong>CNPJ:</strong> @InfNFe.Emit.CNPJ</p>
                <p class="card-text"><strong>Razão Social:</strong> @InfNFe.Emit.xNome</p>
                <p class="card-text"><strong>Nome Fantasia:</strong> @InfNFe.Emit.xFant</p>
                <p class="card-text"><strong>Email:</strong> @InfNFe.Emit.Email</p>
                <h5 class="card-title">Endereço</h5>
                <p class="card-text"><strong>Logradouro:</strong> @InfNFe.Emit.EmitentAddress.xLgr</p>
                <p class="card-text"><strong>Número:</strong> @InfNFe.Emit.EmitentAddress.nro</p>
                <p class="card-text"><strong>Complemento:</strong> @InfNFe.Emit.EmitentAddress.xCpl</p>
                <p class="card-text"><strong>Bairro:</strong> @InfNFe.Emit.EmitentAddress.xBairro</p>
                <p class="card-text"><strong>Cidade:</strong> @InfNFe.Emit.EmitentAddress.xMun</p>
                <p class="card-text"><strong>UF:</strong> @InfNFe.Emit.EmitentAddress.UF</p>
                <p class="card-text"><strong>CEP:</strong> @InfNFe.Emit.EmitentAddress.CEP</p>
                <p class="card-text"><strong>País:</strong> @InfNFe.Emit.EmitentAddress.xPais</p>
                <p class="card-text"><strong>Telefone:</strong> @InfNFe.Emit.EmitentAddress.fone</p>
            </div>
        </div>
    }
    else
    {
        <p class="mt-3">Nenhum emitente encontrado.</p>
    }

    <div class="table-responsive mt-3">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Código do Produto</th>
                    <th>Descrição</th>
                    <th>Quantidade</th>
                    <th>Valor Unitário</th>
                    <th>Valor Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var produto in InfNFe.Products)
                {
                    <tr>
                        <td>@produto.cProd</td>
                        <td>@produto.xProd</td>
                        <td>@produto.qCom</td>
                        <td>@produto.vUnCom.ToString("C")</td>
                        <td>@produto.vProd.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IBrowserFile file;
    private InfNFe InfNFe;

    private async Task HandleSubmit()
    {
        if (file == null || file.Size == 0)
        {
            // Handle error
            return;
        }

        if (!file.Name.EndsWith(".xml"))
        {
            // Handle error
            return;
        }

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);
                InfNFe = new InfNFe(memoryStream);
                //InfNFe = _iInfNFeRepository.Save(InfNFe);
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
}
