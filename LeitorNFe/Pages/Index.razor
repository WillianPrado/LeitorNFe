@page "/"

@using LeitorNFe.Domain.Interfaces
@using Microsoft.AspNetCore.Http
@using LeitorNFe.Data
@using LeitorNFe.Domain.Domain
@using System.IO

@inject IInfNFeRepository _iInfNFeRepository;

<h1>Upload XML</h1>
<form method="post" enctype="multipart/form-data" @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="file">Selecione um arquivo NFe:</label>
        <InputFile name="file" class="form-control" OnChange="HandleFileChange" />
    </div>
    <div class="row">
        <div class="col-md-6">
            <button type="submit" style="border-right: 5px" class="btn btn-primary">Verificar dados da NFe</button>

            <button type="button" class="btn btn-success" @onclick="SaveToOtherClass">Salvar NFe</button>
        </div>
    </div>
</form>

@if (InfNFe != null)
{
    <div class="card mt-3">
        <div class="card-header">
            Dados de Identificação da Nota Fiscal
        </div>
        <div class="card-body">
            <strong>Número da Nota Fiscal:</strong> @InfNFe.Ide.nNF<br />
            <strong>Data e Hora de Emissão:</strong> @InfNFe.Ide.dhEmi.ToString("dd/MM/yyyy HH:mm:ss")<br />
            <strong>Data e Hora de Saída/Entrada:</strong> @InfNFe.Ide.dhSaiEnt.ToString("dd/MM/yyyy HH:mm:ss")
        </div>
    </div>
    @if (InfNFe != null && InfNFe.ICMSTot != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Total do ICMS
            </div>
            <div class="card-body">
                <strong>Valor Total da Nota Fiscal:</strong> @InfNFe.ICMSTot.vNF
            </div>
        </div>
    }
    else
    {
        <p class="mt-3">Nenhum total de ICMS encontrado.</p>
    }

    @if (InfNFe != null && InfNFe.InfProt != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Dados do Protocolo
            </div>
            <div class="card-body">
                <strong>Chave da Nota Fiscal:</strong> @InfNFe.InfProt.chNFe
            </div>
        </div>
    }
    else
    {
        <p class="mt-3">Nenhum dado do protocolo encontrado.</p>
    }

    @if (InfNFe != null && InfNFe.Emit != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Dados do Emitente
            </div>
            <div class="card-body">
                <strong>CNPJ:</strong> @InfNFe.Emit.CNPJ<br />
                <strong>Razão Social:</strong> @InfNFe.Emit.xNome<br />
                <strong>Nome Fantasia:</strong> @InfNFe.Emit.xFant<br /><br />
                <h5 class="card-title">Endereço</h5>
                <strong>Logradouro:</strong> @InfNFe.Emit.EmitentAddress.xLgr<br />
                <strong>Número:</strong> @InfNFe.Emit.EmitentAddress.nro<br />
                <strong>Complemento:</strong> @InfNFe.Emit.EmitentAddress.xCpl<br />
                <strong>Bairro:</strong> @InfNFe.Emit.EmitentAddress.xBairro<br />
                <strong>Cidade:</strong> @InfNFe.Emit.EmitentAddress.xMun<br />
                <strong>UF:</strong> @InfNFe.Emit.EmitentAddress.UF<br />
                <strong>CEP:</strong> @InfNFe.Emit.EmitentAddress.CEP<br />
                <strong>País:</strong> @InfNFe.Emit.EmitentAddress.xPais<br />
                <strong>Telefone:</strong> @InfNFe.Emit.EmitentAddress.fone
            </div>
        </div>
    }
    else
    {
        <p class="mt-3">Nenhum emitente encontrado.</p>
    }

    @if (InfNFe != null && InfNFe.Dest != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                Dados do Destinatário
            </div>
            <div class="card-body">
                <strong>CPF:</strong> @InfNFe.Dest.CPF<br />
                <strong>Nome:</strong> @InfNFe.Dest.xNome<br />
                <strong>Inscrição Estadual:</strong> @InfNFe.Dest.IE<br />
                <strong>Email:</strong> @InfNFe.Dest.email<br /><br />
                <h5 class="card-title">Endereço</h5>
                <strong>Logradouro:</strong> @InfNFe.Dest.DestAddress.xLgr<br />
                <strong>Número:</strong> @InfNFe.Dest.DestAddress.nro<br />
                <strong>Complemento:</strong> @InfNFe.Dest.DestAddress.xCpl<br />
                <strong>Bairro:</strong> @InfNFe.Dest.DestAddress.xBairro<br />
                <strong>Cidade:</strong> @InfNFe.Dest.DestAddress.xMun<br />
                <strong>UF:</strong> @InfNFe.Dest.DestAddress.UF<br />
                <strong>CEP:</strong> @InfNFe.Dest.DestAddress.CEP<br />
                <strong>País:</strong> @InfNFe.Dest.DestAddress.xPais<br />
                <strong>Telefone:</strong> @InfNFe.Dest.DestAddress.fone
            </div>
        </div>
    }
    else
    {
        <p class="mt-3">Nenhum destinatário encontrado.</p>
    }

    <div class="table-responsive mt-3">
        <div class="card-header">
            Lista de produtos
        </div>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Código do Produto</th>
                    <th>Descrição</th>
                    <th>Quantidade</th>
                    <th>Valor Unitário</th>
                    <th>Valor Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var produto in InfNFe.Products)
                {
                    <tr>
                        <td>@produto.cProd</td>
                        <td>@produto.xProd</td>
                        <td>@produto.qCom</td>
                        <td>@produto.vUnCom.ToString("C")</td>
                        <td>@produto.vProd.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IBrowserFile file;
    private InfNFe InfNFe;

    private async Task HandleSubmit()
    {
        if (file == null || file.Size == 0)
        {
            // Handle error
            return;
        }

        if (!file.Name.EndsWith(".xml"))
        {
            // Handle error
            return;
        }

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);
                InfNFe = new InfNFe(memoryStream);
                //InfNFe = _iInfNFeRepository.Save(InfNFe);
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }
    private async Task SaveToOtherClass()
    {
        if (file == null || file.Size == 0)
        {
            // Handle error
            return;
        }

        if (!file.Name.EndsWith(".xml"))
        {
            // Handle error
            return;
        }

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Seek(0, SeekOrigin.Begin);
                InfNFe = new InfNFe(memoryStream);
                //InfNFe = _iInfNFeRepository.Save(InfNFe);
            }
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }
    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
}
